#!/bin/bash
# Enhanced RPM Package Builder for TuxTuner
# Usage: ./createrpm --appname tuxtuner --version 1.0.0 tuxtuner

# Exit on error and show commands
set -eo pipefail

# Configuration
APP_NAME="tuxtuner"
VERSION="1.0.0"
RELEASE="1"
SOURCE_DIR="$HOME/rpmbuild/SOURCES"
SPEC_DIR="$HOME/rpmbuild/SPECS"
BUILD_DIR="$HOME/rpmbuild/BUILD"
RPMS_DIR="$HOME/rpmbuild/RPMS/noarch"
TEMP_DIR=""
LOG_FILE="/tmp/tuxtuner_rpm_build_$(date +%Y%m%d_%H%M%S).log"

# Initialize logging
init_logging() {
    exec > >(tee -a "$LOG_FILE") 2>&1
    echo "=== TuxTuner RPM Builder Log - $(date) ===" >> "$LOG_FILE"
}

# Show message
show_message() {
    local message="$1"
    local type="${2:-info}"
    
    case "$type" in
        "error") echo -e "\033[1;31m$message\033[0m" ;;
        "warning") echo -e "\033[1;33m$message\033[0m" ;;
        *) echo -e "\033[1;32m$message\033[0m" ;;
    esac
}

# Setup RPM build environment
setup_build_env() {
    show_message "Setting up RPM build environment..."
    
    if ! rpmdev-setuptree; then
        show_message "Failed to setup RPM build tree" "error"
        exit 1
    fi
    
    mkdir -p "$SOURCE_DIR" "$SPEC_DIR" "$BUILD_DIR" "$RPMS_DIR"
}

# Prepare application source
prepare_source() {
    show_message "Preparing application source..."
    
    TEMP_DIR="$APP_NAME-$VERSION"
    mkdir -p "$TEMP_DIR"
    
    # Copy the script and license
    cp "tuxtuner" "$TEMP_DIR/"
    cp "LICENSE" "$TEMP_DIR/"
    cp "README.md" "$TEMP_DIR/"
    
    chmod +x "$TEMP_DIR/tuxtuner"
}

# Create source tarball
create_tarball() {
    show_message "Creating source tarball..."
    
    if ! tar -czf "$SOURCE_DIR/$APP_NAME-$VERSION.tar.gz" "$TEMP_DIR"; then
        show_message "Failed to create source tarball" "error"
        exit 1
    fi
}

# Create spec file
create_spec_file() {
    show_message "Creating .spec file..."
    
    cat > "$SPEC_DIR/$APP_NAME.spec" <<EOF
Name:           $APP_NAME
Version:        $VERSION
Release:        $RELEASE%{?dist}
Summary:        TuxTuner - Linux audio tuner
BuildArch:      noarch
License:        GPL
Source0:        %{name}-%{version}.tar.gz
URL:            https://github.com/yourusername/tuxtuner
Requires:       bash, sox, pulseaudio-utils

%description
TuxTuner is a simple audio tuner for Linux systems.

%prep
%setup -q -n %{name}-%{version}

%build
# No build step needed for script

%install
mkdir -p %{buildroot}/%{_bindir}
install -m 755 %{name} %{buildroot}/%{_bindir}/%{name}
mkdir -p %{buildroot}/%{_datarootdir}/doc/%{name}
install -m 644 LICENSE README.md %{buildroot}/%{_datarootdir}/doc/%{name}/

%files
%{_bindir}/%{name}
%doc %{_datarootdir}/doc/%{name}/LICENSE
%doc %{_datarootdir}/doc/%{name}/README.md

%changelog
* $(date '+%a %b %d %Y') Your Name <your.email@example.com> - $VERSION-$RELEASE
- Initial package version
EOF
}

# Build RPM package
build_rpm() {
    show_message "Building RPM package..."
    
    if ! rpmbuild -ba "$SPEC_DIR/$APP_NAME.spec"; then
        show_message "RPM build failed" "error"
        exit 1
    fi
    
    built_rpm=$(ls -t "$RPMS_DIR/${APP_NAME}-${VERSION}-${RELEASE}"*.rpm 2>/dev/null | head -1)
    
    if [[ -z "$built_rpm" ]]; then
        show_message "Failed to find built RPM package" "error"
        exit 1
    fi
    
    show_message "RPM package built successfully!"
    show_message "Location: $built_rpm"
}

# Clean up temporary files
cleanup() {
    if [[ -d "$TEMP_DIR" ]]; then
        rm -rf "$TEMP_DIR"
    fi
}

#!/bin/bash

# List of required commands
REQUIRED_CMDS=("sox" "pacmd")

# Check dependencies
check_dependencies() {
    missing=()
    for cmd in "${REQUIRED_CMDS[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            missing+=("$cmd")
        fi
    done

    if [ ${#missing[@]} -gt 0 ]; then
        echo "Missing dependencies: ${missing[*]}"
        read -p "Attempt to install missing dependencies? [y/N] " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            if command -v dnf &> /dev/null; then
                sudo dnf install -y "${missing[@]}"
            elif command -v zypper &> /dev/null; then
                sudo zypper install -y "${missing[@]}"
            elif command -v apt-get &> /dev/null; then
                sudo apt-get install -y "${missing[@]}"
            else
                echo "Could not determine package manager. Please install manually:"
                echo "  ${missing[*]}"
                exit 1
            fi
        else
            exit 1
        fi
    fi
}



# Rest of your script...

# Main function
main() {
    init_logging
    
    # Check if we're in the right directory
    if [[ ! -f "tuxtuner" || ! -f "LICENSE" || ! -f "README.md" ]]; then
        show_message "Error: Please run this script from the directory containing tuxtuner, LICENSE and README.md" "error"
        exit 1
    fi
	
    setup_build_env
    prepare_source
    create_tarball
    create_spec_file
    build_rpm
    # Run check
    check_dependencies
    cleanup
    
    show_message "Build log: $LOG_FILE"
}

# Handle errors
trap 'show_message "Error: Script failed at line $LINENO. Check $LOG_FILE for details." "error"; cleanup; exit 1' ERR

# Run main function
main "$@"
